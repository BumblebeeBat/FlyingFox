-module(euler_problems).
-export([test/0]).

%If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
%Find the sum of all the multiples of 3 or 5 below 1000.
problem001s(1000, Out) -> Out;
problem001s(X, Out) -> 
    B = (X rem 3),
    C = (X rem 5),
    Y = if
	((B == 0) or (C == 0)) ->
	    X;
	true -> 0
	end,
    problem001s(X+1, Out + Y).
problem001(Gas) ->
    {ok, A} = file:read_file("euler/001.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem001s(0, 0)].
%Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
%1,2,3,5,8,13,21,34,55,89, ...
%By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
problem002s(X, _, Out) when X>4000000 -> Out;
problem002s(X, Y, Out) when (X rem 2) == 0 -> 
    problem002s(X+Y, X, Out+X);
problem002s(X, Y, Out) -> 
    problem002s(X+Y, X, Out).
problem002(Gas) ->
    {ok, A} = file:read_file("euler/002.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem002s(1, 1, 0)].

%The prime factors of 13195 are 5,7, 13 and 29.
%What is the largest prime factor of the number 600851475143 ?
problem003s(A, B) when ((B rem A) == 0) ->
    problem003s(A, B div A);
problem003s(A, B) when (A * A) > B -> B;
problem003s(A, B) -> problem003s(A+2, B).
problem003(Gas) ->
    {ok, A} = file:read_file("euler/003.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem003s(3, 600851475143)].
    

test() ->
    problem001(50000),
    problem002(2000),
    problem003(30000).
