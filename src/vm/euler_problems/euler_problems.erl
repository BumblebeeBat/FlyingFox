-module(euler_problems).
-export([test/0]).
-define(loc, "src/vm/euler_problems/").
%If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
%Find the sum of all the multiples of 3 or 5 below 1000.
problem001s(1000, Out) -> Out;
problem001s(X, Out) -> 
    B = (X rem 3),
    C = (X rem 5),
    Y = if
	((B == 0) or (C == 0)) ->
	    X;
	true -> 0
	end,
    problem001s(X+1, Out + Y).
problem001(Gas) ->
    {ok, A} = file:read_file(?loc ++ "001.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem001s(0, 0)].
%Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
%1,2,3,5,8,13,21,34,55,89, ...
%By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
problem002s(X, _, Out) when X>4000000 -> Out;
problem002s(X, Y, Out) when (X rem 2) == 0 -> 
    problem002s(X+Y, X, Out+X);
problem002s(X, Y, Out) -> 
    problem002s(X+Y, X, Out).
problem002(Gas) ->
    {ok, A} = file:read_file(?loc ++ "002.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem002s(1, 1, 0)].

%The prime factors of 13195 are 5,7, 13 and 29.
%What is the largest prime factor of the number 600851475143 ?
problem003s(A, B) when ((B rem A) == 0) ->
    problem003s(A, B div A);
problem003s(A, B) when (A * A) > B -> B;
problem003s(A, B) -> problem003s(A+2, B).
problem003(Gas) ->
    {ok, A} = file:read_file(?loc ++ "003.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem003s(3, 600851475143)].
%A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
%Find the largest palindrome made from the product of two 3-digit numbers.
flip3(X) ->
    A = X div 100,
    C = X rem 10,
    ((C - A)*99)+X.
palindrone(X) ->
    A = X div 1000,
    B = X rem 1000,
    C = flip3(B),
    C == A.
problem004s() -> problem004s(999, 999, 0).
problem004s(0, 0, Out) -> Out;
problem004s(X, 0, Out) -> problem004s(X-1, 999, Out);
problem004s(X, Y, Out) -> 
    Z = X*Y,
    NOut = if
	       (Z > Out) ->
		   B = palindrone(Z),
		   if
		       B -> Z;
		       true -> Out
		   end;
	       true -> Out
	   end,
    problem004s(X, Y-1, NOut).
problem004(Gas) ->
    {ok, A} = file:read_file(?loc ++ "004.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem004s()].
%2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
%What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
gcd(0, X) -> X;
gcd(Y, X) -> gcd(X rem Y, Y).
problem005s(1, X) -> X;
problem005s(X, Y) -> 
    problem005s(X - 1, Y * X div gcd(X, Y)).
problem005(Gas) ->
    {ok, A} = file:read_file(?loc ++ "005.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem005s(20, 1)].
%Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640
%Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.    
sum_squares(Limit, Limit, Total) -> Total;
sum_squares(X, Limit, Total) ->
    sum_squares(X+1, Limit, Total + (X*X)).
problem006s() ->
    5050*5050 - sum_squares(0, 101, 0).
problem006(Gas) ->
    {ok, A} = file:read_file(?loc ++ "006.fs"),
    B = compiler:compile(A),
    C = language:run(B, Gas),
    C = [problem006s()].
problem007(Gas) ->
    {ok, A} = file:read_file(?loc ++ "007.fs"),
    B = compiler:compile(A),
    language:run(B, Gas).
problem008(Gas) ->
    {ok, A} = file:read_file(?loc ++ "008.fs"),
    B = compiler:compile(A),
    language:run(B, Gas).
problem009(Gas) ->
    {ok, A} = file:read_file(?loc ++ "009.fs"),
    B = compiler:compile(A),
    language:run(B, Gas).
problem010(Gas) ->
    {ok, A} = file:read_file(?loc ++ "010.fs"),
    B = compiler:compile(A),
    language:run(B, Gas).
test() ->
    problem001(20000),
    problem002(8000),
    problem003(60000),
    %problem004(90000000), % 640000 function calls. takes like 12 seconds.
    problem005(8000),
    problem006(8000),
    % [true] = problem007(202491700), % takes like 5 seconds
    [23514624000] = problem008(1300000),
    problem009(1000000),
    problem010(100000000000).

